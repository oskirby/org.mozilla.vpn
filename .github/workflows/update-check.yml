name: Check for updates
on:
  schedule:
    - cron: '0 * * * *' # Runs hourly
  workflow_dispatch: {}

jobs:
  update-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Run external data checker
        uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest
        with:
          args: --update --edit-only --never-fork org.mozilla.vpn.yml

      - name: Check for updates and reset
        id: check-updates
        run: |
          UPSTREAM_REF=$(.github/parse-git-ref.py --module mozillavpn org.mozilla.vpn.yml)
          echo "upstream-ref=${UPSTREAM_REF}" >> $GITHUB_OUTPUT
          if ! git diff --exit-code org.mozilla.vpn.yml; then
            echo "updates=true" >> $GITHUB_OUTPUT
          fi

          git checkout -- org.mozilla.vpn.yml
          CURRENT_REF=$(.github/parse-git-ref.py --module mozillavpn org.mozilla.vpn.yml)
          echo "current-ref=${CURRENT_REF}" >> $GITHUB_OUTPUT
          if [ "${CURRENT_REF}" != "${UPSTREAM_REF}" ]; then
            echo "upstream=true" >> $GITHUB_OUTPUT
          fi

      - uses: actions/setup-python@v5
        if: steps.check-updates.outputs.upstream == 'true'
        with:
          python-version: 3.12
          cache: pip
      - run: pip install -r .github/requirements.txt
        if: steps.check-updates.outputs.upstream == 'true'

      - name: Checkout upstream
        if: steps.check-updates.outputs.upstream == 'true'
        uses: actions/checkout@v4
        with:
          path: upstream
          repository: mozilla-mobile/mozilla-vpn-client
          ref: ${{ steps.check-updates.outputs.upstream-ref }}
          sparse-checkout: |
            Cargo.lock
            requirements.in

      - name: Checkout tools
        if: steps.check-updates.outputs.upstream == 'true'
        uses: actions/checkout@v4
        with:
          path: tools
          repository: flatpak/flatpak-builder-tools
          ref: master

      - name: Fetch latest release details
        if: steps.check-updates.outputs.upstream == 'true'
        run: |
          curl -sSL -o org.mozilla.vpn.releases.xml \
            https://mozilla.github.io/mozillavpn-product-details/org.mozilla.vpn.releases.xml

      - name: Update dependencies
        if: steps.check-updates.outputs.upstream == 'true'
        run: |
          python tools/cargo/flatpak-cargo-generator.py -o flatpak-vpn-crates.json upstream/Cargo.lock
          python tools/pip/flatpak-pip-generator.py -o flatpak-glean-parser.yaml --yaml --build-only $(cat upstream/requirements.in | grep ^glean-parser)

      - name: Create pull request
        uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest
        if: steps.check-updates.outputs.updates == 'true'
        env:
          GIT_AUTHOR_NAME: Flatpak External Data Checker
          GIT_COMMITTER_NAME: Flatpak External Data Checker
          # email sets "github-actions[bot]" as commit author, see https://github.community/t/github-actions-bot-email-address/17204/6
          GIT_AUTHOR_EMAIL: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          GIT_COMMITTER_EMAIL: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          GITHUB_TOKEN: ${{ secrets.UPDATE_TOKEN }}
        with:
          args: --update --never-fork org.mozilla.vpn.yml --pr-labels ${{ github.ref_name }}

      - name: Set automerge
        if: steps.check-updates.outputs.upstream == 'true'
        env:
          GH_TOKEN: ${{ secrets.UPDATE_TOKEN }}
        run: |
          PR_COMMIT_SHA=$(git rev-parse HEAD)
          echo "Found commit: ${PR_COMMIT_SHA}"
          curl -sSL -o pull-requests.json \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${GH_TOKEN}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    https://api.github.com/repos/${{ github.repository }}/commits/${PR_COMMIT_SHA}/pulls
          
          PR_GITHUB_URL=$(cat pull-requests.json | jq -r '.[0].html_url')
          echo "Found PR: ${PR_GITHUB_URL}"
          gh pr merge --auto --squash ${PR_GITHUB_URL}
